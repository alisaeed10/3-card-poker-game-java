
import org.junit.jupiter.api.Test;

import org.junit.jupiter.api.DisplayName;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;

class MyTest {
	PokerInfo object1;
	@BeforeEach
	void init(){
		object1 = new PokerInfo(true, 24,23);
	}
	@Test
	// creating a constructor of pokerInfo
	void constructorTest1(){
		PokerInfo game = new PokerInfo(true,5,20);
		assertEquals(5,game.ante,"Constructor is INCORRECT");
		assertEquals(20, game.pairPlusAmount, "Constructor is INCORRECT");
		assertTrue(game.isPairPlus,"Constructor is INCORRECT");
		assertEquals(52,game.cards.size(),"Constructor is INCORRECT");
	} // end of test 1

	@Test
	// creating the pokerInfo with invalid values
	void constructorTest2(){
		PokerInfo invlaidGame = new PokerInfo(false,30,-1);
		assertEquals(0, invlaidGame.ante, "Constructor handled incorrect values");
		assertEquals(0, invlaidGame.pairPlusAmount, "Constructor handled incorrect values");
		assertEquals(52,invlaidGame.cards.size(),"Constructor handled incorrect values");
	} // end of test 2

	@Test
	// testing the generateRandomCards Method:
	void generateRandomCardsTest1(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		assertEquals(3, playerCards.size(), "generateRandomCards produced INCORRECT size array");
		assertEquals(3,dealersCards.size(),"generateRandomCards produced INCORRECT size array");
	} // end of test 3

	@Test
	// testing the range of random numbers generated by the method
	void generateRandomCardsTest2(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		for(Integer i: playerCards){
			if(i<0 || i>52){
				fail("INCORRECT range for generateRandomCards Method");
			}
		}
		for(Integer n: dealersCards){
			if(n < 0 || n > 52){
				fail("INCORRECT range for generateRandomCards Method");
			}
		}
	} // end of test 4

	@Test
		// testing if generateRandomCards method will generate the same cards for player and dealer
	void generateRandomCardsTest3() {
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		for(Integer i: playerCards){
			for(Integer n: dealersCards) {
				if (i == n) {
					fail("INCORRECT Randomization for generateRandomCards Method");
				}
			}
		}
	} // end of test 5

	@Test
		// testing how generateRandomCards method will handle the same arrayList pasted in
	void generateRandomCardsTest4() {
		ArrayList<Integer> playerCards = new ArrayList();
		object1.generateRandomCards(playerCards, playerCards);
		object1.generateRandomCards(playerCards, playerCards);
		assertEquals(3, playerCards.size(), "INCORRECT, generateRandomCards produced double the cards");
		for(Integer i: playerCards){
			if(i < 0 || i > 52){
				fail("INCORRECT range for generateRandomCards Method");
			}
		}
	}// end of test 6

	@Test
	// testing the clear Method to clear values constructor
	void clear(){
		object1.clear();
		assertEquals(0, object1.ante,"clear Method INCORRECT");
		assertEquals(0, object1.pairPlusAmount,"clear Method INCORRECT");
		assertFalse(object1.isPairPlus,"clear Method INCORRECT");
	} // end of test 7

	@Test
		// testing the clear Method to clear values constructor
	void clear2(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		object1.clear();
		assertEquals(0, object1.userCards.size(),"clear Method INCORRECT for arrays");
		assertEquals(0, object1.dealerCards.size(),"clear Method INCORRECT for arrays");
	} // end of test 8

	@Test
	// testing the pushedAnte Method that will clear everything expect the ante and pair plus bet
	void pushedAnteTest(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		object1.pushedAnte();
		assertEquals(0, object1.userCards.size(),"pushAnte Method INCORRECT for arrays");
		assertEquals(0, object1.dealerCards.size(),"pushAnte Method INCORRECT for arrays");
	}// end of test 9

	@Test
		// testing the pushedAnte Method that will clear everything expect the ante and pair plus bet
	void pushedAnteTest2(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		object1.pushedAnte();
		assertEquals(0, object1.userCards.size(),"pushAnte Method INCORRECT");
		assertEquals(0, object1.dealerCards.size(),"pushAnte Method INCORRECT");
		assertEquals(24, object1.ante, "pushAnte Method INCORRECT");
		assertEquals(23, object1.pairPlusAmount, "pushAnte Method INCORRECT");
	}// end of test 10

	@Test
	// testing the evaluateCards method regularly
	void evaluateCardsTest(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		object1.generateRandomCards(playerCards, dealersCards);
		object1.generateRandomCards(dealersCards, playerCards);
		int num = object1.evaluateCards(dealersCards,playerCards);
		boolean works = false;
		if (num <=3 && num >= 1){
			works = true;
		}
		assertTrue(works,"INCORRECT evaluateCards method");
	}// end of test 11

	@Test
		// testing the evaluateCards method when player wins
	void evaluateCardsTest1(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(1);
		playerCards.add(2);
		playerCards.add(3);
		dealersCards.add(4);
		dealersCards.add(10);
		dealersCards.add(6);
		assertEquals(2,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 12
	@Test
		// testing the evaluateCards method when dealer wins
	void evaluateCardsTest2(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(10);
		playerCards.add(2);
		playerCards.add(6);
		dealersCards.add(1);
		dealersCards.add(2);
		dealersCards.add(3);
		assertEquals(1,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 13

	@Test
		// testing the evaluateCards method when player has three of a kind and dealer has pair
	void evaluateCardsTest3(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(1);
		playerCards.add(1);
		playerCards.add(1);
		dealersCards.add(1);
		dealersCards.add(1);
		dealersCards.add(3);
		assertEquals(2,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 14

	@Test
		// testing the evaluateCards method when player and dealer both have the same cards
	void evaluateCardsTest4(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(13);
		playerCards.add(13);
		playerCards.add(13);
		dealersCards.add(13);
		dealersCards.add(13);
		dealersCards.add(13);
		assertEquals(3,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 15

	@Test
		// testing the evaluateCards method when player  and dealer have the same highest card value
	void evaluateCardsTest5(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(13);
		playerCards.add(4);
		playerCards.add(10);
		dealersCards.add(1);
		dealersCards.add(12);
		dealersCards.add(13);
		assertEquals(3,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 16

	@Test
		// testing the evaluateCards method when player has a pair and dealer doesn't
	void evaluateCardsTest6(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(2);
		playerCards.add(2);
		playerCards.add(8);
		dealersCards.add(1);
		dealersCards.add(6);
		dealersCards.add(4);
		assertEquals(2,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 17
	@Test
		// testing the evaluateCards method when player doesn't have a pair and dealer does
	void evaluateCardsTest7(){
		ArrayList<Integer> playerCards = new ArrayList();
		ArrayList<Integer> dealersCards = new ArrayList();
		playerCards.add(2);
		playerCards.add(3);
		playerCards.add(8);
		dealersCards.add(1);
		dealersCards.add(1);
		dealersCards.add(9);
		assertEquals(1,object1.evaluateCards(dealersCards,playerCards),"INCORRECT evaluateCards method");
	}// end of test 18

	@Test
	// testing the evaluatePairPlus method which indicates if player has cards that are a pair or higher
	void evaluatePairPlus(){
		ArrayList<Integer> playerCards = new ArrayList();
		playerCards.add(1);
		playerCards.add(1);
		playerCards.add(1);
		assertEquals(2, object1.evaluatePairPlus(playerCards),"evaluatePairPlus INCORRECT");
	} // end of test 19

	@Test
		// testing the evaluatePairPlus method which indicates if player has cards have a straight && same shape
	void evaluatePairPlus2(){
		ArrayList<Integer> playerCards = new ArrayList();
		playerCards.add(1);
		playerCards.add(2);
		playerCards.add(3);
		assertEquals(1, object1.evaluatePairPlus(playerCards),"evaluatePairPlus INCORRECT");
	} // end of test 20
	@Test
		// testing the evaluatePairPlus method which indicates if player has cards have the same shape
	void evaluatePairPlus3(){
		ArrayList<Integer> playerCards = new ArrayList();
		playerCards.add(1);
		playerCards.add(2);
		playerCards.add(2);
		assertEquals(4, object1.evaluatePairPlus(playerCards),"evaluatePairPlus INCORRECT");
	} // end of test 21

	@Test
		// testing the evaluatePairPlus method which indicates if player has cards form a pair
	void evaluatePairPlus4(){
		ArrayList<Integer> playerCards = new ArrayList();
		playerCards.add(34);
		playerCards.add(8);
		playerCards.add(45);
		assertEquals(5, object1.evaluatePairPlus(playerCards),"evaluatePairPlus INCORRECT");
	} // end of test 22
	@Test
		// testing the evaluatePairPlus method which indicates if player doesn't have a queen or higher
	void evaluatePairPlus5(){
		ArrayList<Integer> playerCards = new ArrayList();
		playerCards.add(30);
		playerCards.add(25);
		playerCards.add(45);
		assertEquals(6, object1.evaluatePairPlus(playerCards),"evaluatePairPlus INCORRECT");
	} // end of test 23
}
